let User,UserInputError,mongoose;_2be‍.x([["default",()=>_2be‍.o]]);_2be‍.w("../models",[["User",["User"],function(v){User=v}]]);_2be‍.w("apollo-server-express",[["UserInputError",["UserInputError"],function(v){UserInputError=v}]]);_2be‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);



_2be‍.d({
  Query: {
    users: (root, args, context, info) => {
      return User.find({})
    },
    user: (root, { id }, context, info) => {
      if (!mongoose.Types.ObjectId.isValid(id)) {
        throw new UserInputError(`${id} is not a valid user ID`)
      }
      return User.findById(id)
    }
  },
  Mutation: {
    signUp: (root, args, context, info) => {
      return User.create(args)
    }
  }
});
