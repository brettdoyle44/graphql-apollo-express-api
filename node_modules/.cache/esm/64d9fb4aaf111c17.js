let User,UserInputError,mongoose,Joi,SignUp;_af1‍.x([["default",()=>_af1‍.o]]);_af1‍.w("../models",[["User",["User"],function(v){User=v}]]);_af1‍.w("apollo-server-express",[["UserInputError",["UserInputError"],function(v){UserInputError=v}]]);_af1‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_af1‍.w("joi",[["default",["Joi"],function(v){Joi=v}]]);_af1‍.w("../schemas",[["SignUp",["SignUp"],function(v){SignUp=v}]]);





_af1‍.d({
  Query: {
    users: (root, args, context, info) => {
      return User.find({})
    },
    user: (root, { id }, context, info) => {
      if (!mongoose.Types.ObjectId.isValid(id)) {
        throw new UserInputError(`${id} is not a valid user ID`)
      }
      return User.findById(id)
    }
  },
  Mutation: {
    signUp: async (root, args, context, info) => {
      await Joi.validate(args, SignUp, { abortEarly: false })
      return User.create(args)
    }
  }
});
